//ÖDEV SORULARI
/*
1.Soru->Dizide kaç adet karakter geçiyor(karakter sayısı anlamında olmayacak) bunu sayan bir fonksiyon yazın.
Örneğin stringimiz
	Su an bu dersi dinliyorum.-> ( S,u,a,n,b,d,e,r,s,i,l,y,o,m). Yani bir kere saydığımız karakteri bir daha saymayacağız.
2.Soru->Recursive şekilde OBEB-OKEK fonksiyonu.
	GCD
3.Soru->Kullanıcıdan dizi alıp diagonallerindeki değerlerin çarpımını yapan fonksiyon yazınız.
	1 2 3
	4 5 6
	7 8 9    1*5*9=45.
4.Soru->3.Soruda yaptığımız işlemi bu sefer sağ üst köşeden sol alt köşeye yapan bir fonksiyon yazalım ve 3.Sorudaki fonksiyon ile aynı sonucu
veriyorsa true, değilse false döndürsün.
	1 2 3 
	4 5 6
	7 8 9	3*5*7=105.False
5.Soru->Kullanıcıdan bir dizi alıp dizinin satir ve sutunlarının toplamını hesaplayıp yazdıran bir fonksiyon yazınız.
	1 2 3
	4 5 6
	7 8 9
	1.Satır toplamı:6
	2.Satır toplamı:15
	3.Satır toplamı:24
	1.Sutun toplamı:12
	2.Sutun toplamı:15
	3.Sutun toplamı:18
*/

//1.SORU
/*int diziKarakterSay(char kullaniciGirisi[]){
	char karakterler[26];// max kullanabilecek karakterleri.
	int i,j;//i ilk döngüm(kullaniciGirisi),j ikinci döngüm (karakterler icin)
	for(i=0;i<26;i++){
		karakterler[i]='$';// bos mu degil mi bunu sorgulamak icin.
	}
	i=0;//0a çektik.
	while(kullaniciGirisi[i]!='\0'){
		j=0;//ikinci.
		while(1){
			if(karakterler[j]=='$'){
				karakterler[j]=kullaniciGirisi[i];
				break;
			}
			else if(karakterler[j]==kullaniciGirisi[i]){
				break;
			}
			j++;
		}
		i++;	
	}
	for(i=0;i<26;i++){
		if(karakterler[i]=='$'){
			break;
		}
	}
	return i;
}
int main(){
	int ozelKarakterler=diziKarakterSay("ogunbirinci");
	printf("Gonderdiginiz string %d adet ozel karakter icermektedir.",ozelKarakterler);
	return 0;
}*/

//2.SORU
/*
int recursiveOBEB(int x,int y){
	if(y==0){
		return x;
	}
	return recursiveOBEB(y,x%y);
}
int recursiveOKEK(int x,int y){
	return x*y/recursiveOBEB(x,y);
}
int main(){
	printf("OBEB:%d\n",recursiveOBEB(12,3));
	printf("OKEK:%d",recursiveOKEK(12,3));
	return 0;
}
/*
	12,3---->3,0
		----->return 3.	OBEB=3.
	36/3=12.
*/


//3.SORU-4.SORU
/*
void diziyiDoldur(int fonkDizi[][5],int satirSayisi,int sutunSayisi){
	int i,j;
	srand(time(NULL));
	for(i=0;i<satirSayisi;i++){
		for(j=0;j<sutunSayisi;j++){
			fonkDizi[i][j]=rand()%5+1;
		}
	}
}
void diziyiYazdir(int fonkDizi[][5],int satirSayisi,int sutunSayisi){
	int i,j;
	for(i=0;i<satirSayisi;i++){
		for(j=0;j<sutunSayisi;j++){
			printf("%d ",fonkDizi[i][j]);
		}
		printf("\n");
	}
}
int diagonalCarpimi(int fonkDizi[][5],int satirSayisi,int sutunSayisi){
	int i,j;
	int carpimSonucu=1;
	for(i=0;i<satirSayisi;i++){
		for(j=0;j<sutunSayisi;j++){
			if(i==j){
				carpimSonucu*=fonkDizi[i][j];
			}
		}
	}
	return carpimSonucu;
}
int sagdanDiagonalCarpimi(int fonkDizi[][5],int satirSayisi,int sutunSayisi){
	int i,j;
	int carpimSonucu=1;
	for(i=0;i<satirSayisi;i++){
		for(j=0;j<sutunSayisi;j++){
			if(i+j==satirSayisi-1){
				carpimSonucu*=fonkDizi[i][j];
			}
		}
	}
	printf("Sagdan diagonal carpimi:%d\n",carpimSonucu);
	if(carpimSonucu==diagonalCarpimi(fonkDizi,satirSayisi,sutunSayisi)){
		return 1;
	}
	else{
		return 0;
	}
	
}

//5.SORU
void satirSutunToplami(int fonkDizi[][5],int satirSayisi,int sutunSayisi){
	int i,j;
	for(i=0;i<satirSayisi;i++){
		int satirToplam=0;
		int sutunToplam=0;
		for(j=0;j<sutunSayisi;j++){
			satirToplam+=fonkDizi[i][j];
			sutunToplam+=fonkDizi[j][i];//sutun toplamina eristik.	
		}
		printf("%d.satirin toplami:%d\n",i+1,satirToplam);
		printf("%d.sutunun toplami:%d\n",i+1,sutunToplam);
	}
}
int main(int argc,char **argv){
	int satirSayisi=5,sutunSayisi=5;
	int dizi[satirSayisi][sutunSayisi];
	diziyiDoldur(dizi,satirSayisi,sutunSayisi);
	diziyiYazdir(dizi,satirSayisi,sutunSayisi);
	printf("Diagonal carpimlari:%d\n",diagonalCarpimi(dizi,satirSayisi,sutunSayisi));
	int sonuc=sagdanDiagonalCarpimi(dizi,satirSayisi,sutunSayisi);
	if(sonuc){
		printf("Sagdan ve soldan diagonal carpimlari esittir");
	}
	else{
		printf("Degildir.\n");
	}
	satirSutunToplami(dizi,satirSayisi,sutunSayisi);
	return 0;
	
}
*/